x Core render engine
x remove indices from vertex buffer
x extend linear algebra stuff
  x dot product and things like that
  x invert matrix
    x test matrix invert
  - rotors
x 3D unlit extension
  x Node3D transformation stuff
  x SceneTree3D
  x gltf import? Or obj?
    x loading geometry
      x test it with a mesh
    x loading materials
      x loading textures
  x proprietary mesh format
    x read/write
    x gltf to btoc
    x load btoc mesh
  x turn it into an extension
x try it with a couple of meshes [generally OK, only small meshes, no weird tfs]
  x bistro does not work because it's too big, out of memory :(
  / that castle scene is probably also too big
  x Tried some Sketchfab scenes
x use unlit3D in examples
  x btoc_import
  x spinning_cubes
  x gltf_import
x full.js does not provide export "Camera3D"
x lambertian3D
  x transform normals into world or view space
     This was apparently way easier than I thought since you don't need to
     preserve orthogonality
  x directional light
  - point light
  - spotlight
- Rename stuff
  - graphics.ts -> core.ts
  - extensions -> modules
- Example scenes
  - building with cars
  - spinning phone probably

- improve keyword usage
  - remove `public` keyword (it's the default apparently)
  - insert `_` prefix for all private functions and attributes

- optimization
  - BatchNode3D
  - sorting
    - also depth sorting probably
  - instancing?
- Multiple canvases (most importantly change `aspectRatio`)
  Note that sharing a context is not supported in WebGL 1, so this would have to
  be library multi-instancing (i.e. a hassle)

- PBR?
  - loading PBR materials
- 2D extension
- 3D half-lambertian extension?
  - transform normals to world or view space